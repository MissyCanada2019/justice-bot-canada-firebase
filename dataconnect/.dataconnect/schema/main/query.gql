extend type Query {
  """
  ✨ Look up a single `FormVersion` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  formVersion(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: FormVersion_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: FormVersion_FirstRow
  ): FormVersion @fdc_generated(from: "FormVersion", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `LegalFormType` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  legalFormType(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: LegalFormType_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: LegalFormType_FirstRow
  ): LegalFormType @fdc_generated(from: "LegalFormType", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `Notification` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  notification(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Notification_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Notification_FirstRow
  ): Notification @fdc_generated(from: "Notification", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `User` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  user(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: User_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: User_FirstRow
  ): User @fdc_generated(from: "User", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `UserFormInstance` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  userFormInstance(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: UserFormInstance_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: UserFormInstance_FirstRow
  ): UserFormInstance @fdc_generated(from: "UserFormInstance", purpose: QUERY_SINGLE)
  """
  ✨ List `FormVersion` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  formVersions(
    """
    Filter condition to narrow down the query results.
    """
    where: FormVersion_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [FormVersion_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: FormVersion_Having
  ): [FormVersion!]! @fdc_generated(from: "FormVersion", purpose: QUERY_MULTIPLE)
  """
  ✨ List `LegalFormType` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  legalFormTypes(
    """
    Filter condition to narrow down the query results.
    """
    where: LegalFormType_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [LegalFormType_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: LegalFormType_Having
  ): [LegalFormType!]! @fdc_generated(from: "LegalFormType", purpose: QUERY_MULTIPLE)
  """
  ✨ List `Notification` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  notifications(
    """
    Filter condition to narrow down the query results.
    """
    where: Notification_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Notification_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Notification_Having
  ): [Notification!]! @fdc_generated(from: "Notification", purpose: QUERY_MULTIPLE)
  """
  ✨ List `User` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  users(
    """
    Filter condition to narrow down the query results.
    """
    where: User_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [User_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: User_Having
  ): [User!]! @fdc_generated(from: "User", purpose: QUERY_MULTIPLE)
  """
  ✨ List `UserFormInstance` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  userFormInstances(
    """
    Filter condition to narrow down the query results.
    """
    where: UserFormInstance_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [UserFormInstance_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: UserFormInstance_Having
  ): [UserFormInstance!]! @fdc_generated(from: "UserFormInstance", purpose: QUERY_MULTIPLE)
}
